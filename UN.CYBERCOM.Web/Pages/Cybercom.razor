@page "/"
@using UN.CYBERCOM.ViewModels
@using UN.CYBERCOM.Web.Helpers
@using UN.CYBERCOM.Contracts.CybercomDAO.ContractDefinition
@using System.Threading;
@inherits ReactiveInjectableComponentBase<CybercomViewModel>
@inject IJSRuntime JSRun
<PageTitle>UNofficial CYBERCOM</PageTitle>
<h3>UNofficial CYBERCOM</h3>
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    @if(ViewModel.AccountNumber != null)
    {
        <h5>Wallet: @ViewModel.AccountNumber</h5>
        @if (ViewModel.IsLoading)
        {
            <p>Loading...</p>
        }
        else if (!ViewModel.IsDeployed)
        {
            <button type="button" @onclick="ViewModel.Deploy.BindCommand<MouseEventArgs>()">Deploy</button>
        }
        else
        {
            <p>Contract: @ViewModel.ContractAddress</p>
            <p>Voting: @ViewModel.VotingAddress</p>
            <p>Council Management: @ViewModel.CouncilManagerAddress</p>
            <p>Membership Management: @ViewModel.MembershipAddress</p>
            <p>Membership Removal Management: @ViewModel.MembershipRemovalAddress</p>
            <p>Voting Parameters Management: @ViewModel.VotingParametersManagerAddress</p>
            <button @onclick="ViewModel.Load.BindCommand<MouseEventArgs>()" type="button">Reload</button>
            <AddMembershipView ViewModel="ViewModel.AddMembershipVM"/>
            <AddChangeVotingParametersView ViewModel="ViewModel.AddChangeParametersVM"/>
            <h2>Nations</h2>
            <TelerikGrid Data="ViewModel.Nations">
                <GridColumns>
                    <GridColumn Field="@nameof(NationViewModel.Id)" Title="Address" />
                    <GridColumn Field="Council.Name" Title="Council" />
                    <GridColumn Field="CouncilGroup.Name" Title="Council Group" />
                    <GridColumn Field="@nameof(NationViewModel.Name)" Title="Name" />
                    
                    <GridColumn Title="Actions">
                        <Template>
                            <button class="btn btn-primary" @onclick="((NationViewModel)context).Remove.BindCommand<MouseEventArgs>()"><i class="fa-solid fa-trash-xmark"></i></button>
                        </Template>
                    </GridColumn>
                </GridColumns>
            </TelerikGrid>
            <TelerikTabStrip>
                <TabStripTab Title="Voting Parameters">
                    <TelerikGrid Data="ViewModel.VotingParameters" TItem="VotingParametersViewModel">
                        <GridColumns>
                            <GridColumn Title="Council">
                                <Template>
                                    <h6>@(((VotingParametersViewModel)context).Council?.Name)</h6>
                                </Template>
                            </GridColumn>
                            <GridColumn Field="@nameof(VotingParametersViewModel.AvgVotes)" EditorType="GridEditorType.CheckBox" Title="Average Votes?" HeaderClass="custom-header"/>
                            <GridColumn Field="@nameof(VotingParametersViewModel.RandomizeByGroup)" Title="Randomize by Group" EditorType="GridEditorType.CheckBox" HeaderClass="custom-header"/>
                            <GridColumn Field="@nameof(VotingParametersViewModel.OutputCountForGroup)" Title="Output Count for Group" HeaderClass="custom-header" />
                            <GridColumn Field="@nameof(VotingParametersViewModel.RandomizeByMember)" Title="Randomize by Member" EditorType="GridEditorType.CheckBox" HeaderClass="custom-header"/>
                            <GridColumn Field="@nameof(VotingParametersViewModel.OutputCountForMember)" Title="Output Count for Member" HeaderClass="custom-header"/>
                            <GridColumn Field="@nameof(VotingParametersViewModel.SumNumerator)" Title="Sum Numerator" HeaderClass="custom-header"/>
                            <GridColumn Field="@nameof(VotingParametersViewModel.SumDenominator)" Title="Sum Denominator" HeaderClass="custom-header"/>
                            <GridColumn Field="@nameof(VotingParametersViewModel.VoteNumerator)" Title="Vote Numerator" HeaderClass="custom-header"/>
                            <GridColumn Field="@nameof(VotingParametersViewModel.VoteDenominator)" Title="Vote Denominator" HeaderClass="custom-header" />
                        </GridColumns>
                    </TelerikGrid>
                    <ProposalManager ViewModel="ViewModel.ChangeParametersVM" TProposal="ChangeVotingParametersProposalViewModel" TProposals="ChangeVotingParametersProposalsViewModel">
                        <ExtraColumns>
                            <GridColumn Title="Parameters">
                                <Template>
                                    <TelerikGrid Data="((ChangeVotingParametersProposalViewModel)context).Parameters">
                                        <GridColumns>
                                            <GridColumn Field="Council.Name" Title="Council"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.AvgVotes)" EditorType="GridEditorType.CheckBox" Title="Average Votes?" HeaderClass="custom-header"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.RandomizeByGroup)" Title="Randomize by Group" EditorType="GridEditorType.CheckBox" HeaderClass="custom-header"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.OutputCountForGroup)" Title="Output Count for Group" HeaderClass="custom-header" />
                                            <GridColumn Field="@nameof(VotingParametersViewModel.RandomizeByMember)" Title="Randomize by Member" EditorType="GridEditorType.CheckBox" HeaderClass="custom-header"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.OutputCountForMember)" Title="Output Count for Member" HeaderClass="custom-header"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.SumNumerator)" Title="Sum Numerator" HeaderClass="custom-header"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.SumDenominator)" Title="Sum Denominator" HeaderClass="custom-header"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.VoteNumerator)" Title="Vote Numerator" HeaderClass="custom-header"/>
                                            <GridColumn Field="@nameof(VotingParametersViewModel.VoteDenominator)" Title="Vote Denominator" HeaderClass="custom-header" />
                                        </GridColumns>
                                    </TelerikGrid>
                                </Template>
                            </GridColumn>
                        </ExtraColumns>
                    </ProposalManager>
                </TabStripTab>
                <TabStripTab Title="Membership Requests">
                    <ProposalManager ViewModel="ViewModel.MembershipProposalsVM" TProposal="MembershipProposalViewModel" TProposals="MembershipProposalsViewModel">
                        <ExtraColumns>
                            <GridColumn Field="Council.Name" Title="Council" />
                            <GridColumn Field="CouncilGroup.Name" Title="Council Group" />
                            <GridColumn Field="NewNation.Id" Title="Nation Address" />
                            <GridColumn Field="NewNation.Name" Title="Nation Name" />
                        </ExtraColumns>
                    </ProposalManager>
                </TabStripTab>
                <TabStripTab Title="Membership Removal Requests">
                    <ProposalManager ViewModel="ViewModel.MembershipRemovalProposalsVM" TProposal="MembershipRemovalProposalViewModel" TProposals="MembershipRemovalProposalsViewModel">
                        <ExtraColumns>
                            <GridColumn Field="NationToRemove.Id" Title="Nation Address" />
                            <GridColumn Field="NationToRemove.Name" Title="Nation Name" />
                        </ExtraColumns>
                    </ProposalManager>
                </TabStripTab>
            </TelerikTabStrip>
            
        }
    }
}
@code {
    protected SemaphoreSlim Slim { get; } = new SemaphoreSlim(0);
    protected SemaphoreSlim Slim2 { get; } = new SemaphoreSlim(0);
    protected string? SignedDocHash{ get; set; }
    protected string? SignedData{ get; set; }
    protected override Task OnInitializedAsync()
    {
        ViewModel.SignatureRequest.RegisterHandler(async data =>
        {
            await JSRun.InvokeVoidAsync("signTransaction", ViewModel.AccountNumber, data.Input.ContractAddress, data.Input.TXData, nameof(CallMemberRequestFin));
            await Slim.WaitAsync();
            data.SetOutput(SignedData ?? throw new InvalidDataException());
            SignedData = null;
        });
        ViewModel.SignData.RegisterHandler(async data =>
        {
            await JSRun.InvokeVoidAsync("signHash", ViewModel.AccountNumber, data.Input, nameof(CallDocHashFin));
            await Slim2.WaitAsync();
            data.SetOutput(SignedDocHash ?? throw new InvalidOperationException());
            SignedDocHash = null;
        });
        return base.OnInitializedAsync();
    }
    [JSInvokable("SetAccount")]
    public async Task SetAccount(string accountNumber)
    {
        ViewModel.AccountNumber = accountNumber;
    }
    [JSInvokable("CallMemberRequestFin")]
    public Task CallMemberRequestFin(string signedData)
    {
        SignedData = signedData;
        Slim.Release();
        return Task.CompletedTask;
    }
    [JSInvokable("CallDocHashFin")]
    public Task CallDocHashFin(string signedData)
    {
        SignedDocHash = signedData;
        Slim2.Release();
        return Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRun.InvokeVoidAsync("SetDotNetObject", dotNetReference);
        }
    }
}
