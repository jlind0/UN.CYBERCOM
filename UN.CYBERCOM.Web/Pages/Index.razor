@page "/"
@using UN.CYBERCOM.ViewModels
@using UN.CYBERCOM.Web.Helpers
@inherits ReactiveInjectableComponentBase<IndexViewModel>
@inject IJSRuntime JSRun
<PageTitle>Index</PageTitle>

@if(ViewModel != null && ViewModel.AccountNumber != null)
{
    <h3>@ViewModel.AccountNumber</h3>
    @if(!ViewModel.IsDeployed)
    {
        <button type="button" @onclick="ViewModel.Deploy.BindCommand<MouseEventArgs>()">Deploy</button>
    }
    else{
        <p>@ViewModel.ContractAddress</p>
        <p><b>Total:</b>@ViewModel.TotalBalance.ToString() | <b>My Balance:</b>@ViewModel.MyBalance.ToString()</p>
        <p>@if (ViewModel.IsContributor) 
            {
                <b>Contributor</b>
            }
            &nbsp;        
            @if (ViewModel.IsStakeHolder) 
            {
                <b>Stakeholder</b> 
            }
        </p>
        <p>Contribute: <input type="number" @bind-value="ViewModel.TotalBalance"/>
            <button type="button" @onclick="ViewModel.Contribute.BindCommand<MouseEventArgs>()">Contribute</button></p>
    }
}
@code{
    string acct = null;
    [JSInvokable("SetAccount")]
    public async Task SetAccount(string accountNumber)
    {
        ViewModel.AccountNumber = accountNumber;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRun.InvokeVoidAsync("SetDotNetObject", dotNetReference);
        }
    }
    
}